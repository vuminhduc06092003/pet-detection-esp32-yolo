from flask import Flask, request, jsonify, send_from_directory
from datetime import datetime
import torch
import cv2
import numpy as np
import os


# 1. KH·ªûI T·∫†O

app = Flask(__name__)

# ‚îÄ‚îÄ Th·ª≠ load m√¥ h√¨nh t√πy ch·ªânh (best.pt). N·∫øu ch∆∞a c√≥ ‚Üí d√πng yolov5s pretrained
MODEL_PATH = "best.pt"
try:
    model = torch.hub.load('ultralytics/yolov5', 'custom',
                           path=MODEL_PATH, force_reload=False)
    print(f"üéØ Loaded custom model: {MODEL_PATH}")
except Exception as e:
    print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y {MODEL_PATH} ‚Äì d√πng yolov5s m·∫∑c ƒë·ªãnh.")
    model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# (tu·ª≥ ch·ªçn) ch·ªânh threshold
model.conf = 0.4          # confidence cut-off
model.iou  = 0.45         # NMS IoU threshold

# ‚îÄ‚îÄ Th∆∞ m·ª•c l∆∞u tr·ªØ
UPLOAD_FOLDER  = "uploads"
RESULT_FOLDER  = "results"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)


# 2. ROUTE NH·∫¨N ·∫¢NH & NH·∫¨N DI·ªÜN

@app.route('/upload', methods=['POST'])
def upload_and_detect():
    # 2.1. ƒê·ªçc d·ªØ li·ªáu ·∫£nh
    if not request.data:
        return jsonify({"status": "fail", "msg": "No image data"}), 400

    nparr = np.frombuffer(request.data, np.uint8)
    img   = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    if img is None:
        return jsonify({"status": "fail", "msg": "Decode error"}), 400

    # 2.2. L∆∞u ·∫£nh g·ªëc
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    raw_name   = f"{ts}.jpg"
    raw_path   = os.path.join(UPLOAD_FOLDER, raw_name)
    cv2.imwrite(raw_path, img)
    print(f"üì•  ·∫¢nh g·ªëc ƒë√£ l∆∞u: {raw_path}")

    # 2.3. Ch·∫°y YOLOv5
    results  = model(img)
    boxes_df = results.pandas().xyxy[0]
    labels   = boxes_df['name'].tolist()
    print(f"üß†  Ph√°t hi·ªán: {labels}")

    # 2.4. Sinh ·∫£nh c√≥ bounding-box
    rendered = results.render()[0]          # numpy BGR
    res_name = f"{ts}_pred.jpg"
    res_path = os.path.join(RESULT_FOLDER, res_name)
    cv2.imwrite(res_path, rendered)
    print(f"üíæ  ·∫¢nh k·∫øt qu·∫£ ƒë√£ l∆∞u: {res_path}")

    # 2.5. Ghi log
    with open("log.csv", "a", encoding="utf-8") as f:
        f.write(f"{ts},{','.join(labels)}\n")

    # 2.6. Tr·∫£ JSON (k√®m link xem ·∫£nh)
    return jsonify({
        "status"     : "ok",
        "labels"     : labels,
        "result_url" : f"/result/{res_name}"
    }), 200


# 3. ROUTE L·∫§Y ·∫¢NH K·∫æT QU·∫¢

@app.route('/result/<filename>')
def get_result(filename):
    # Cho ph√©p m·ªü ·∫£nh ngay tr√™n tr√¨nh duy·ªát: http://IP:5000/result/20250604_143201_pred.jpg
    return send_from_directory(RESULT_FOLDER, filename)


# 4. CH·∫†Y SERVER

if __name__ == '__main__':
    # host='0.0.0.0' ƒë·ªÉ ESP32-CAM (ho·∫∑c m√°y kh√°c) truy c·∫≠p ƒë∆∞·ª£c
    app.run(host='0.0.0.0', port=5000, debug=False)
